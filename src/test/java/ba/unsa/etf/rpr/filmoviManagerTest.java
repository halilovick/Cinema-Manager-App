package ba.unsa.etf.rpr;

import ba.unsa.etf.rpr.business.filmoviManager;
import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.dao.FilmDaoSQLImpl;
import ba.unsa.etf.rpr.domain.Film;
import ba.unsa.etf.rpr.exceptions.FilmoviException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.Mockito.when;

class filmoviManagerTest {
    private filmoviManager filmoviManager;
    private Film film;
    private FilmDaoSQLImpl filmDaoSQLMock;
    private List<Film> filmovi;

    @BeforeEach
    public void initialize() throws FilmoviException {
        filmoviManager = Mockito.mock(filmoviManager.class);
        film = new Film();
        film.setIme("HANGOVER");
        film.setId(100);
        filmDaoSQLMock = Mockito.mock(FilmDaoSQLImpl.class);
        filmovi = new ArrayList<>();
        filmovi.addAll(filmoviManager.getAll());
    }

    @Test
    void add() throws FilmoviException {
        MockedStatic<DaoFactory> daoFactoryMockedStatic = Mockito.mockStatic(DaoFactory.class);
        daoFactoryMockedStatic.when(DaoFactory::filmDao).thenReturn(filmDaoSQLMock);
        when(DaoFactory.filmDao().getAll()).thenReturn(filmovi);
        Mockito.doCallRealMethod().when(filmoviManager).add(film);
        FilmoviException filmoviException = Assertions.assertThrows(FilmoviException.class, () -> {
            filmoviManager.add(film);
        });
        Assertions.assertEquals("Film can not already have an ID. ID is autogenerated.", filmoviException.getMessage());
        daoFactoryMockedStatic.verify(DaoFactory::filmDao);
        Mockito.verify(filmoviManager).add(film);
        daoFactoryMockedStatic.close();
    }
}
